//This file contains some general utilties.

//sum up a sequence
SeqSum := function(inv)
  sum := 0;
  for s in inv do
    sum +:= s;
  end for;
  return sum;
end function;

//invert a matrix using the Smith form (slightly faster).
IntegralInvert := function(M,F)
  S,B,C := SmithForm(ChangeRing(M,RingOfIntegers(F)));
  M_inv := C*ChangeRing(S,F)^-1*B;
  return M_inv;
end function;

//compute the lcm of all entries in a matrix
MatLCM := function(M)
  min := 1; s := Eltseq(M);
  for x in s do
    min := LCM(Denominator(x),min);
  end for;
  return min;
end function;

//giving a matrix with generators in rows, compute a minimal set of generators
EchelonBasis := function(M,A,F)
  min := MatLCM(M);
  lambda_A := ChangeRing(min*M,A);
  lambda_A := HermiteForm(lambda_A);
  lambda_A := RowSubmatrix(lambda_A,Rank(lambda_A));
  lambda_F := ChangeRing(lambda_A,F)/min;
  return lambda_F;
end function;

//get the matrix representation of automorphism sigma
MatrixSigma := function(sigma,O,F)
 bs := Basis(O);
 M := ZeroMatrix(F,#bs,#bs);
 for i:=1 to #bs do
  img := O!sigma(bs[i]);
  M[i] := Vector(Eltseq(img));
 end for;
 return M;
end function;

//Compute the trace matrix of an integral basis b
BasisTrace := function(L,O,F,sigma,a)
  b := Basis(O); r := #b;
  t := ZeroMatrix(F, r^2, r^2);
  for i:=1 to r do
    t[i][i] := Trace(L!(b[i]*b[i]));
    for j:=i+1 to r do
      t[i][j] := Trace(L!(b[i]*b[j]));
      t[j][i] := t[i][j];
    end for;
  end for;
  for j:=1 to r do
    bjs := b[j];
    for e:=1 to r-1 do
      bjs := sigma(bjs);
      for i:=1 to r do
	t[e*r+i][(r-e)*r+j] := a*Trace(L!(b[i]*bjs));
      end for;
    end for;
  end for;
  return t;
end function;

//compute the reduced trace of an order of the cyclic algebra generated by the rows of lambda
ReducedTrace := function(lambda,L,O,F,sigma,a)
  r := Degree(O);
  t := BasisTrace(L,O,F,sigma,a);
  traces := ZeroMatrix(F,r^2,r^2);
  for i:=1 to r^2 do
    for j:=1 to r^2 do
	  traces[i][j] := (Matrix(lambda[i])*t*Transpose(Matrix(lambda[j])))[1][1];
    end for;
  end for;
  return Determinant(traces);
end function;